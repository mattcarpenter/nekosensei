//
//  MainWindowController.swift
//  NekoSensei
//
//  Created by matthew carpenter on 6/21/16.
//  Copyright © 2016 matthew carpenter. All rights reserved.
//

import Cocoa

class MainWindowController: NSWindowController {
    
    @IBOutlet weak var rangeControl: NSSegmentedControl!
    @IBOutlet weak var recallModeButton: NSButton?
    @IBOutlet weak var guessField: NSTextField?
    @IBOutlet weak var configuredCounterControl: NSSegmentedControl!
    @IBOutlet weak var guessCounterControl: NSSegmentedControl?
    
    var currentNumber: Int?

    override func windowDidLoad() {
        super.windowDidLoad()
    
        // Implement this method to handle any initialization after your window controller's window has been loaded from its nib file.
    }
    
    @IBAction func test(sender: NSButton) {
        let tts = TTS();
        nextNumber() {
            (result: String) in
            tts.speak(result)
        }
    }
    
    func nextNumber(completion: (result: String) -> Void) {
        let t = Translator();
        var numbers = [String]()
        var configuredCounters = [String]()
        var number = ""
        
        // Figure out which counter we're going to use
        for i in 0..<configuredCounterControl.segmentCount {
            if (configuredCounterControl.isSelectedForSegment(i)) {
                let counter = configuredCounterControl?.labelForSegment(i)
                configuredCounters.append(counter!)
            }
        }
        
        if configuredCounters.count == 0 {
            return
        }
        
        let counter = configuredCounters[Int(arc4random_uniform(UInt32(configuredCounters.count)))]

        if (counter == "Hours") {
            
            // Hours are 1-23 and do not need to be translated
            number = String(arc4random_uniform(22) + 1) + ":00"
            completion(result: number)
            
        } else if (counter == "Minutes") {
            
            // Minutes are 0-59 and do not need to be translated
            completion(result: String(arc4random_uniform(58) + 1) + " 分")
        } else {
            
            // Grab a random number in each range selected in the configuration options then push into `numbers` array.
            for i in 0..<rangeControl.segmentCount {
                if rangeControl.segmentCount > 0 {
                    if (rangeControl.isSelectedForSegment(i)) {
                        let number = randomNumberInRange(rangeControl.labelForSegment(i)!)
                        numbers.append(number)
                    } else {
                        numbers.append(String(randomNumberInRange("X")))
                    }
                }
            }
            
            // Pick a random number (could have been generated by any of the configured masked ranges)
            number = numbers[Int(arc4random_uniform(UInt32(numbers.count)))]
            
            // Apply the appropriate translated counter, or append the english counter and translate if needed
            if counter == "None" {
                completion(result: number)
            } else if counter == "People" {
                completion(result: number + " 人")
            } else {
                t.translate(number + " " + counter) {
                    (result: String) in
                    completion(result: result)
                }
            }
            
        }
    }

    /**
     * Generates a stringified random number based on the masked range provided
     */
    func randomNumberInRange(range: String) -> String {
        var strNumber = ""
        for i in range.characters {
            if (i == "X") {
                strNumber += String(arc4random_uniform(9))
            } else if (i == "0") {
                strNumber += "0"
            }
        }
        
        // strip leading 0's
        let intNumber = Int(strNumber)!
        strNumber = String(intNumber)
        
        return strNumber
    }

}
